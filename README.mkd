# Plantilla para usar C++ en Inteligencia Computacional

Esto es una plantilla que provee lo necesario para hacer los ejercicios de Inteligencia Computacional usando C++ junto con:

* [Armadillo](http://arma.sourceforge.net/) para álgebra lineal,
* [Gnuplot](http://www.gnuplot.info/) para graficar datos,
    * [gnuplot-iostream](https://github.com/dstahlke/gnuplot-iostream) para utilizar Gnuplot desde C++,
* [OpenMP](http://bisqwit.iki.fi/story/howto/openmp/) para paralelismo.

También se incluyen algunos programas de ejemplo que muestran cómo usar estos componentes.

Esto fue probado en GNU/Linux solamente. Tal vez sea fácil de adaptar a Windows 10 usando [WSL](https://msdn.microsoft.com/en-us/commandline/wsl/about).

## Tabla de Contenidos

* [Dependencias](#dependencias)
* [Configuración inicial](#configuración-inicial)
* [Agregar un nuevo ejercicio](#agregar-un-nuevo-ejercicio)
* [Velocidad](#velocidad)
* [Utilidades](#utilidades)
* [Ejemplos](#ejemplos)

## Dependencias

* Un compilador con soporte para C++14 (GCC >= 5.1).
* OpenMP
* Armadillo
* Gnuplot
* Boost
* CMake

## Configuración inicial

1. Hacer una copia de este repositorio, cambiando el nombre de la carpeta

    ```bash
    git clone https://github.com/junrrein/ic-template.git guia1
    rm -rf guia1/.git/
    ```

2. Compilar OpenBLAS para OpenMP

    ```bash
    cd guia1/
    tar xf OpenBLAS.tar.xz
    cd OpenBLAS
    make USE_OPENMP=1 -j4
    ln --symbolic libopenblas.so libopenblas_openmp.so
    ```

3. Compilar el proyecto

    ```bash
    cd guia1/
    mkdir build
    cd build
    cmake -DCMAKE_BUILD_TYPE=Debug ..
    make
    ```

    **Nota**: En lugar de hacer el paso de compilación manualmente, se recomienda utilizar un IDE con integración con CMake como [QtCreator](https://wiki.qt.io/Qt_Creator), disponible en los repositorios de casi cualquier distribución. Utilizar un IDE también va a facilitar el proceso de depuración.

## Agregar un nuevo ejercicio

1. Crear un nuevo archivo

    ```bash
    cd guia1/
    touch ejercicio2.cpp
    ```

2. Agregar al final de CMakeLists.txt la línea

    ```cmake
    add_executable (ejercicio2 "ejercicio2.cpp")
    ```

3. Si no se está usando un IDE, regenerar el sistema de construcción

    ```bash
    cd build
    cmake -DCMAKE_BUILD_TYPE=Debug ..
    ```

## Velocidad

TODO

## Utilidades

* Ayudante de Depuración de Armadillo para QtCreator

    TODO

* Estilo para clang-format

    TODO

## Ejemplos

TODO
