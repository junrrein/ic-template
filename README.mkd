# Plantilla para usar C++ en Inteligencia Computacional

Esto es una plantilla que provee lo necesario para hacer los ejercicios de Inteligencia Computacional usando C++ junto con:

* [Armadillo](http://arma.sourceforge.net/) para √°lgebra lineal, y
* [Gnuplot](http://www.gnuplot.info/) (mediante [gnuplot-iostream](https://github.com/dstahlke/gnuplot-iostream)) para graficar datos.

Tambi√©n se incluyen algunos programas de ejemplo que muestran c√≥mo usar estos componentes.

Probado en Windows 10 y Fedora 26 usando Qt Creator 4.3.1.

## Tabla de Contenidos

  * [Motivaci√≥n](#motivaci√≥n)
  * [Dependencias](#dependencias)
  * [Dependencias externas (descargadas por la plantilla)](#dependencias-externas-descargadas-por-la-plantilla)
  * [Instalar dependencias](#instalar-dependencias)
  * [Configuraci√≥n inicial](#configuraci√≥n-inicial)
     * [De forma gr√°fica](#de-forma-gr√°fica)
     * [En l√≠nea de comandos (Linux)](#en-l√≠nea-de-comandos-linux)
  * [Tareas comunes](#tareas-comunes)
     * [Compilar y ejecutar ejercicios](#compilar-y-ejecutar-ejercicios)
     * [Agregar un nuevo ejercicio](#agregar-un-nuevo-ejercicio)
     * [Agregar una nueva gu√≠a pr√°ctica](#agregar-una-nueva-gu√≠a-pr√°ctica)
  * [Velocidad](#velocidad)
  * [Ejemplos](#ejemplos)
  * [Problemas (que no tiene Matlab)](#problemas-que-no-tiene-matlab)

## Motivaci√≥n

En la materia lo com√∫n es usar Matlab/Octave para hacer los ejercicios. Esto no es por casualidad. Estos entornos proveen, por defecto, facilidades para el √°lgebra de matrices y para realizar gr√°ficos, que simplifican en gran medida la resoluci√≥n de los problemas que se encuentran durante el estudio. El problema es que el rendimiento suele no ser el mejor, y en esta materia es importante ya que algunos de los algoritmos estudiados demoran mucho tiempo en ejecutarse (20-30 minutos en estos entornos).

Usar C++ es una soluci√≥n obvia para mejorar el rendimiento, pero resulta menos obvio encontrar un buen reemplazo para las facilidades que provee Matlab/Octave. Esta plantilla trata de proveer estas facilidades para que el cambio entre entornos tenga la menor fricci√≥n posible.

Armadillo es una biblioteca de √°lgebra lineal con una API deliberadamente similar a Matlab. Incluso provee una [tabla de conversi√≥n](http://arma.sourceforge.net/docs.html#syntax) que muestra operaciones de Matlab y sus equivalentes en Armadillo.

Gnuplot, como Matlab/Octave, permite construir gr√°ficos interactivos (es decir, que permiten ser redimensionados, hacer zoom, etc.). La sintaxis tiene diferencias pero, dentro de todo, es un reemplazo aceptable y los gr√°ficos tienen una buena calidad de imagen. Es muy usado, provee amplia documentaci√≥n y adem√°s est√° lleno de [ejemplos](http://gnuplot.sourceforge.net/demo_svg_5.0/).

## Dependencias

* GCC ‚â• 4.8.1
* Qt Creator ‚â• 4.3 (opcional en Linux)
* Git
* CMake
* Gnuplot

## Dependencias externas (descargadas por la plantilla)

* Boost
* Armadillo
* OpenBLAS
* gnuplot-iostream

## Instalar dependencias

* Windows
    * [Qt Creator](https://www.qt.io/download-open-source/)
    * [Git](https://git-scm.com/download/)
    * [CMake](https://cmake.org/download/#latest)

        * Durante la instalaci√≥n, en el paso `Install options`, seleccionar alguna de las dos opciones que agregan CMake al `PATH`.

    * [GnuPlot](https://sourceforge.net/projects/gnuplot/files/gnuplot/5.0.6/)

        * Durante la instalaci√≥n, en el paso `Select Additional Tasks`, seleccionar la opci√≥n `Add application directory to your PATH environment variable`.

* Linux
    * Qt Creator

        Se recomienda Qt Creator ‚â• 4.3. Si su distribuci√≥n no lo provee, obt√©ngalo  [utilizando el instalador](https://www.qt.io/download-open-source/) o compilando el programa desde su c√≥digo fuente.

    * Otras dependencias

        * Fedora
    
            ```bash
            sudo dnf groupinstall 'Herramientas y Librer√≠as de Desarrollo en C'
            sudo dnf install git-core cmake gnuplot
            ```
    
        * Ubuntu
    
            ```bash
            sudo apt install build-essential git-core cmake gnuplot
            ```

## Configuraci√≥n inicial

### De forma gr√°fica

1. Abrir Qt Creator. Ir a `New Project` ‚Üí `Import Project` ‚Üí `Git Clone`. Hacer click en `Choose...`

2. Completar los campos:

    * `Repository`: *https://github.com/junrrein/ic-template.git*
    * `Path`: Directorio padre de la plantilla
    * `Directory`: Nombre del directorio donde ir√° la plantilla

    Seleccionar tambi√©n la opci√≥n `Recursive`

3. Hacer click en `Next`. Ahora la plantilla ser√° descargada. Hacer click en `Finish` cuando finalice.

    **(Windows)** Qt Creator pedir√° la ruta al ejecutable de Git. TODO

4. Aparecer√° la pantalla de configuraci√≥n del proyecto. En el kit `Desktop` hacer click en `Details`. De las opciones que aparecen dejar seleccionadas `Debug` y `Release`. Hacer click en `Configure Project`.

    El proyecto ser√° configurado, y una de las dependencias externas (Boost) ser√° descargada.

5. En el √°rbol de proyectos, desplegar `ic-template`, luego desplegar la carpeta `external`. Hacer click derecho en el objetivo `external` (los objetivos est√°n simbolizados con un martillo üî®) y seleccionar la opci√≥n `Build "external"`.

    Este paso descargar√° el resto de las dependencias externas, y una de ellas (OpenBLAS) ser√° compilada. Esto tardar√° un buen rato. Aprovech√° y prepar√° el mate. Puede verse el progreso en la parte inferior derecha de la ventana.

6. Cargar el ayudante de depuraci√≥n de Armadillo. Para ello ir al men√∫ `Tools` ‚Üí `Options...`. Luego ir a la secci√≥n `Debugger`, pesta√±a `GDB`. En `Extra Debugging Helpers` hacer click en `Browse...`. Seleccionar el archivo `utilidades/armadilloDebugHelpers.py`.

7. En el panel inferior izquierdo, seleccionar el objetivo `guia1-ejercicio1`, configuraci√≥n `Debug`.

    En el panel izquierdo, ir a `Projects`. En la secci√≥n izquierda de la pantalla, ir a `Build & Run` ‚Üí `Desktop` ‚Üí `Run`. En el panel derecho, en la secci√≥n `Run`, seleccionar la opci√≥n `Run in terminal`.

8. En el panel izquierdo, ir a `Edit`. En el √°rbol de proyectos, desplejar la carpeta `guia1`, luego desplegar el objetivo `guia1-ejercicio1`, y abrir `ejercicio1.cpp`.

9. Para compilar el ejercicio, usar el √≠cono üî® en el panel izquierdo o la combinaci√≥n de teclas `Ctrl + B`. Para compilar y ejecutar el ejercicio, usar el √≠cono ‚ñ∂Ô∏è en el panel izquierdo o `Ctrl + R`.

### En l√≠nea de comandos (Linux)

1. Hacer una copia de este repositorio

    ```bash
    git clone --recursive https://github.com/junrrein/ic-template.git practica
    ```

2. Configurar el proyecto

    ```bash
    cd practica/
    mkdir build-debug
    cd build-debug
    cmake -DCMAKE_BUILD_TYPE=Debug ..
    ```

3. Descargar y compilar dependencias externas

    ```bash
    make external
    ```

4. Compilar ejercicios

    ```bash
    make
    ```

## Tareas comunes

### Compilar y ejecutar ejercicios

```bash
cd practica/build-debug
make
./guia1/guia1-ejercicio1
```

### Agregar un nuevo ejercicio

1. Crear un nuevo archivo

    ```bash
    touch guia1/ejercicio2.cpp
    ```

2. Agregar al final de `guia1/CMakeLists.txt` lo siguiente

    ```cmake
    agregar_ejecutable (ejercicio2)
    ```

3. Si no se est√° usando Qt Creator, regenerar el sistema de construcci√≥n

    ```bash
    cd build-debug
    cmake -DCMAKE_BUILD_TYPE=Debug ..
    ```

### Agregar una nueva gu√≠a pr√°ctica

1. Copiar el directorio `guia1`

    ```bash
    cp --recursive guia1 guia2
    ```

2. En `guia2/CMakeLists.txt`, cambiar el prefijo de los ejercicios

    `set (PREFIJO guia1)` ‚áí `set (PREFIJO guia2)`

3. En el `CMakeLists.txt` del directorio ra√≠z, agregar la l√≠nea

    ```cmake
    add_subdirectory (guia2)
    ```

4. Si no se est√° usando Qt Creator, regenerar el sistema de construcci√≥n

    ```bash
    cd build-debug
    cmake -DCMAKE_BUILD_TYPE=Debug ..
    ```

## Velocidad

Para ejercicios que requieren de mucho poder de procesamiento, se recomienda compilar el proyecto utilizando todas las optimizaciones del compilador. Para esto, hacer:

* Usando QtCreator: En el panel inferior izquierdo, elegir la configuraci√≥n `Release`. Ahora va a ser necesario construir el objetivo `external` nuevamente, como se hizo en la configuraci√≥n inicial, para luego compilar los ejercicios.

* Desde l√≠nea de comandos:

    ```bash
    cd practica/
    mkdir build-release
    cd build-release/
    cmake -DCMAKE_BUILD_TYPE=Release ..
    make external
    make
    ```

**Nota** No es posible depurar un programa que usa estas opciones de compilaci√≥n. Por lo tanto el flujo de trabajo recomendado es: desarrollar el ejercicio en modo `Debug` hasta que se tiene la seguridad de que funciona correctamente, y luego cambiar al modo `Release`.

## Ejemplos

Se proveen un par de ejemplos en la carpeta `ejemplos/`, los cuales pueden compilarse haciendo `make ejemplos` desde el directorio de construcci√≥n (`build/`). Los ejecutables se encontrar√°n en el directorio `build/ejemplos/`.

`graficos` muestra c√≥mo hacer algunos tipos de gr√°ficos simples, como `plot`, `stem` y `subplot`.

`omp` muestra un ejemplo de uso de [OpenMP](http://bisqwit.iki.fi/story/howto/openmp/) para acelerar c√°lculos mediante el uso de paralelismo.

## Problemas (que no tiene Matlab)

* No se puede interactuar con las ventanas ploteadas cuando se usa `multiplot` (el equivalente a `subplot`).

* No es posible hacer gr√°ficos en el medio de una sesi√≥n de depuraci√≥n.